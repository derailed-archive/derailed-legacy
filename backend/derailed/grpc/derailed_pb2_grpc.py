# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import derailed_pb2 as derailed__pb2


class GuildStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
        ----
            channel: A grpc.Channel.
        """
        self.publish = channel.unary_unary(
            '/derailed.grpc.Guild/publish',
            request_serializer=derailed__pb2.Publ.SerializeToString,
            response_deserializer=derailed__pb2.Publr.FromString,
        )
        self.get_guild_info = channel.unary_unary(
            '/derailed.grpc.Guild/get_guild_info',
            request_serializer=derailed__pb2.GetGuildInfo.SerializeToString,
            response_deserializer=derailed__pb2.RepliedGuildInfo.FromString,
        )


class GuildServicer(object):
    """Missing associated documentation comment in .proto file."""

    def publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_guild_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GuildServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'publish': grpc.unary_unary_rpc_method_handler(
            servicer.publish,
            request_deserializer=derailed__pb2.Publ.FromString,
            response_serializer=derailed__pb2.Publr.SerializeToString,
        ),
        'get_guild_info': grpc.unary_unary_rpc_method_handler(
            servicer.get_guild_info,
            request_deserializer=derailed__pb2.GetGuildInfo.FromString,
            response_serializer=derailed__pb2.RepliedGuildInfo.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'derailed.grpc.Guild', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Guild(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def publish(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/derailed.grpc.Guild/publish',
            derailed__pb2.Publ.SerializeToString,
            derailed__pb2.Publr.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def get_guild_info(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/derailed.grpc.Guild/get_guild_info',
            derailed__pb2.GetGuildInfo.SerializeToString,
            derailed__pb2.RepliedGuildInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class UserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
        ----
            channel: A grpc.Channel.
        """
        self.publish = channel.unary_unary(
            '/derailed.grpc.User/publish',
            request_serializer=derailed__pb2.UPubl.SerializeToString,
            response_deserializer=derailed__pb2.UPublr.FromString,
        )


class UserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'publish': grpc.unary_unary_rpc_method_handler(
            servicer.publish,
            request_deserializer=derailed__pb2.UPubl.FromString,
            response_serializer=derailed__pb2.UPublr.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'derailed.grpc.User', rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class User(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def publish(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/derailed.grpc.User/publish',
            derailed__pb2.UPubl.SerializeToString,
            derailed__pb2.UPublr.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
